{"version":3,"file":"LoggerModule.js","sourceRoot":"","sources":["../src/LoggerModule.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { IncomingMessage, ServerResponse } from 'node:http';\n\nimport {\n  Global,\n  Module,\n  DynamicModule,\n  NestModule,\n  MiddlewareConsumer,\n  RequestMethod,\n  Inject,\n} from '@nestjs/common';\nimport { Provider } from '@nestjs/common/interfaces';\nimport { pinoHttp } from 'pino-http';\n\nimport { createProvidersForDecorated } from './InjectPinoLogger';\nimport { Logger } from './Logger';\nimport {\n  Params,\n  LoggerModuleAsyncParams,\n  PARAMS_PROVIDER_TOKEN,\n} from './params';\nimport { PinoLogger } from './PinoLogger';\nimport { Store, storage } from './storage';\n\n/**\n * As NestJS@11 still supports express@4 `*`-style routing by itself let's keep\n * it for the backward compatibility. On the next major NestJS release `*` we\n * can replace it with `/{*splat}`, and drop the support for NestJS@9 and below.\n */\nconst DEFAULT_ROUTES = [{ path: '*', method: RequestMethod.ALL }];\n\n@Global()\n@Module({ providers: [Logger], exports: [Logger] })\nexport class LoggerModule implements NestModule {\n  static forRoot(params?: Params | undefined): DynamicModule {\n    const paramsProvider: Provider<Params> = {\n      provide: PARAMS_PROVIDER_TOKEN,\n      useValue: params || {},\n    };\n\n    const decorated = createProvidersForDecorated();\n\n    return {\n      module: LoggerModule,\n      providers: [Logger, ...decorated, PinoLogger, paramsProvider],\n      exports: [Logger, ...decorated, PinoLogger, paramsProvider],\n    };\n  }\n\n  static forRootAsync(params: LoggerModuleAsyncParams): DynamicModule {\n    const paramsProvider: Provider<Params | Promise<Params>> = {\n      provide: PARAMS_PROVIDER_TOKEN,\n      useFactory: params.useFactory,\n      inject: params.inject,\n    };\n\n    const decorated = createProvidersForDecorated();\n\n    const providers: any[] = [\n      Logger,\n      ...decorated,\n      PinoLogger,\n      paramsProvider,\n      ...(params.providers || []),\n    ];\n\n    return {\n      module: LoggerModule,\n      imports: params.imports,\n      providers,\n      exports: [Logger, ...decorated, PinoLogger, paramsProvider],\n    };\n  }\n\n  constructor(@Inject(PARAMS_PROVIDER_TOKEN) private readonly params: Params) {}\n\n  configure(consumer: MiddlewareConsumer) {\n    const {\n      exclude,\n      forRoutes = DEFAULT_ROUTES,\n      pinoHttp,\n      useExisting,\n      assignResponse,\n    } = this.params;\n\n    const middlewares = createLoggerMiddlewares(\n      pinoHttp || {},\n      useExisting,\n      assignResponse,\n    );\n\n    if (exclude) {\n      consumer\n        .apply(...middlewares)\n        .exclude(...exclude)\n        .forRoutes(...forRoutes);\n    } else {\n      consumer.apply(...middlewares).forRoutes(...forRoutes);\n    }\n  }\n}\n\nfunction createLoggerMiddlewares(\n  params: NonNullable<Params['pinoHttp']>,\n  useExisting = false,\n  assignResponse = false,\n) {\n  if (useExisting) {\n    return [bindLoggerMiddlewareFactory(useExisting, assignResponse)];\n  }\n\n  const middleware = pinoHttp(\n    ...(Array.isArray(params) ? params : [params as any]),\n  );\n\n  // @ts-expect-error: root is readonly field, but this is the place where\n  // it's set actually\n  PinoLogger.root = middleware.logger;\n\n  // FIXME: params type here is pinoHttp.Options | pino.DestinationStream\n  // pinoHttp has two overloads, each of them takes those types\n  return [middleware, bindLoggerMiddlewareFactory(useExisting, assignResponse)];\n}\n\nfunction bindLoggerMiddlewareFactory(\n  useExisting: boolean,\n  assignResponse: boolean,\n) {\n  return function bindLoggerMiddleware(\n    req: IncomingMessage,\n    res: ServerResponse,\n    next: () => void,\n  ) {\n    let log = req.log;\n    let resLog = assignResponse ? res.log : undefined;\n\n    if (!useExisting && req.allLogs) {\n      log = req.allLogs[req.allLogs.length - 1]!;\n    }\n    if (assignResponse && !useExisting && res.allLogs) {\n      resLog = res.allLogs[res.allLogs.length - 1]!;\n    }\n\n    storage.run(new Store(log, resLog), next);\n  };\n}\n"]}