{"version":3,"file":"params.js","sourceRoot":"","sources":["../src/params.ts"],"names":[],"mappings":";;;AA2EA,wCAIC;AAJD,SAAgB,cAAc,CAC5B,YAAiB;IAEjB,OAAO,CAAC,CAAC,YAAY,IAAI,QAAQ,IAAI,YAAY,CAAC;AACpD,CAAC;AAEY,QAAA,qBAAqB,GAAG,aAAa,CAAC","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {\n  MiddlewareConfigProxy,\n  ModuleMetadata,\n} from '@nestjs/common/interfaces';\nimport { Logger, DestinationStream } from 'pino';\nimport { Options } from 'pino-http';\n\nexport type PassedLogger = { logger: Logger };\n\nexport interface Params {\n  /**\n   * Optional parameters for `pino-http` module\n   * @see https://github.com/pinojs/pino-http#pinohttpopts-stream\n   */\n  pinoHttp?: Options | DestinationStream | [Options, DestinationStream];\n\n  /**\n   * Optional parameter for routing. It should implement interface of\n   * parameters of NestJS built-in `MiddlewareConfigProxy['forRoutes']`.\n   * @see https://docs.nestjs.com/middleware#applying-middleware\n   * It can be used for both disabling automatic req/res logs and\n   * removing request context from following logs. It works for all requests by\n   * default. If you only need to turn off the automatic request/response\n   * logging for some specific (or all) routes but keep request context for app\n   * logs use `pinoHttp.autoLogging` field.\n   */\n  exclude?: Parameters<MiddlewareConfigProxy['exclude']>;\n\n  /**\n   * Optional parameter for routing. It should implement interface of\n   * parameters of NestJS built-in `MiddlewareConfigProxy['forRoutes']`.\n   * @see https://docs.nestjs.com/middleware#applying-middleware\n   * It can be used for both disabling automatic req/res logs and\n   * removing request context from following logs. It works for all requests by\n   * default. If you only need to turn off the automatic request/response\n   * logging for some specific (or all) routes but keep request context for app\n   * logs use `pinoHttp.autoLogging` field.\n   */\n  forRoutes?: Parameters<MiddlewareConfigProxy['forRoutes']>;\n\n  /**\n   * Optional parameter to skip pino configuration in case you are using\n   * FastifyAdapter, and already configure logger in adapter's config. The Pros\n   * and cons of this approach are described in the FAQ section of the\n   * documentation:\n   * @see https://github.com/iamolegga/nestjs-pino#faq.\n   */\n  useExisting?: true;\n\n  /**\n   * Optional parameter to change property name `context` in resulted logs,\n   * so logs will be like:\n   * {\"level\":30, ... \"RENAME_CONTEXT_VALUE_HERE\":\"AppController\" }\n   */\n  renameContext?: string;\n\n  /**\n   * Optional parameter to also assign the response logger during calls to\n   * `PinoLogger.assign`. By default, `assign` does not impact response logs\n   * (e.g.`Request completed`).\n   */\n  assignResponse?: boolean;\n}\n\n// for support of nestjs@8 we don't use\n//   extends Pick<FactoryProvider, 'provide' | 'useFactory'>\n// as it's `useFactory` return type in v8 is `T` instead of `T | Promise<T>` as\n// in feature versions, so it's not compatible\nexport interface LoggerModuleAsyncParams\n  extends Pick<ModuleMetadata, 'imports' | 'providers'> {\n  useFactory: (...args: any[]) => Params | Promise<Params>;\n  inject?: any[];\n}\n\nexport function isPassedLogger(\n  pinoHttpProp: any,\n): pinoHttpProp is PassedLogger {\n  return !!pinoHttpProp && 'logger' in pinoHttpProp;\n}\n\nexport const PARAMS_PROVIDER_TOKEN = 'pino-params';\n"]}