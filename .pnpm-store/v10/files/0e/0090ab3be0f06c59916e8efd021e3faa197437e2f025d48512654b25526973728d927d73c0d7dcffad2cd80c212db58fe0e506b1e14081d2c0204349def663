{"version":3,"file":"PinoLogger.js","sourceRoot":"","sources":["../src/PinoLogger.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Injectable, Inject, Scope } from '@nestjs/common';\nimport pino from 'pino';\n\nimport { Params, isPassedLogger, PARAMS_PROVIDER_TOKEN } from './params';\nimport { storage } from './storage';\n\ntype PinoMethods = Pick<\n  pino.Logger,\n  'trace' | 'debug' | 'info' | 'warn' | 'error' | 'fatal'\n>;\n\n/**\n * This is copy of pino.LogFn but with possibilty to make method override.\n * Current usage works:\n *\n *  trace(msg: string, ...args: any[]): void;\n *  trace(obj: object, msg?: string, ...args: any[]): void;\n *  trace(...args: Parameters<LoggerFn>) {\n *    this.call('trace', ...args);\n *  }\n *\n * But if change local LoggerFn to pino.LogFn â€“ this will say that overrides\n * are incompatible\n */\ntype LoggerFn =\n  | ((msg: string, ...args: any[]) => void)\n  | ((obj: object, msg?: string, ...args: any[]) => void);\n\nlet outOfContext: pino.Logger | undefined;\n\nexport function __resetOutOfContextForTests() {\n  outOfContext = undefined;\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore reset root for tests only\n  PinoLogger.root = undefined;\n}\n\n@Injectable({ scope: Scope.TRANSIENT })\nexport class PinoLogger implements PinoMethods {\n  /**\n   * root is the most root logger that can be used to change params at runtime.\n   * Accessible only when `useExisting` is not set to `true` in `Params`.\n   * Readonly, but you can change it's properties.\n   */\n  static readonly root: pino.Logger;\n\n  protected context = '';\n  protected readonly contextName: string;\n  protected readonly errorKey: string = 'err';\n\n  constructor(\n    @Inject(PARAMS_PROVIDER_TOKEN) { pinoHttp, renameContext }: Params,\n  ) {\n    if (\n      typeof pinoHttp === 'object' &&\n      'customAttributeKeys' in pinoHttp &&\n      typeof pinoHttp.customAttributeKeys !== 'undefined'\n    ) {\n      this.errorKey = pinoHttp.customAttributeKeys.err ?? 'err';\n    }\n\n    if (!outOfContext) {\n      if (Array.isArray(pinoHttp)) {\n        outOfContext = pino(...pinoHttp);\n      } else if (isPassedLogger(pinoHttp)) {\n        outOfContext = pinoHttp.logger;\n      } else if (\n        typeof pinoHttp === 'object' &&\n        'stream' in pinoHttp &&\n        typeof pinoHttp.stream !== 'undefined'\n      ) {\n        outOfContext = pino(pinoHttp, pinoHttp.stream);\n      } else {\n        outOfContext = pino(pinoHttp);\n      }\n    }\n\n    this.contextName = renameContext || 'context';\n  }\n\n  get logger(): pino.Logger {\n    // outOfContext is always set in runtime before starts using\n\n    return storage.getStore()?.logger || outOfContext!;\n  }\n\n  trace(msg: string, ...args: any[]): void;\n  trace(obj: unknown, msg?: string, ...args: any[]): void;\n  trace(...args: Parameters<LoggerFn>) {\n    this.call('trace', ...args);\n  }\n\n  debug(msg: string, ...args: any[]): void;\n  debug(obj: unknown, msg?: string, ...args: any[]): void;\n  debug(...args: Parameters<LoggerFn>) {\n    this.call('debug', ...args);\n  }\n\n  info(msg: string, ...args: any[]): void;\n  info(obj: unknown, msg?: string, ...args: any[]): void;\n  info(...args: Parameters<LoggerFn>) {\n    this.call('info', ...args);\n  }\n\n  warn(msg: string, ...args: any[]): void;\n  warn(obj: unknown, msg?: string, ...args: any[]): void;\n  warn(...args: Parameters<LoggerFn>) {\n    this.call('warn', ...args);\n  }\n\n  error(msg: string, ...args: any[]): void;\n  error(obj: unknown, msg?: string, ...args: any[]): void;\n  error(...args: Parameters<LoggerFn>) {\n    this.call('error', ...args);\n  }\n\n  fatal(msg: string, ...args: any[]): void;\n  fatal(obj: unknown, msg?: string, ...args: any[]): void;\n  fatal(...args: Parameters<LoggerFn>) {\n    this.call('fatal', ...args);\n  }\n\n  setContext(value: string) {\n    this.context = value;\n  }\n\n  assign(fields: pino.Bindings) {\n    const store = storage.getStore();\n    if (!store) {\n      throw new Error(\n        `${PinoLogger.name}: unable to assign extra fields out of request scope`,\n      );\n    }\n    store.logger = store.logger.child(fields);\n    store.responseLogger?.setBindings(fields);\n  }\n\n  protected call(method: pino.Level, ...args: Parameters<LoggerFn>) {\n    if (this.context) {\n      if (isFirstArgObject(args)) {\n        const firstArg = args[0];\n        if (firstArg instanceof Error) {\n          args = [\n            Object.assign(\n              { [this.contextName]: this.context },\n              { [this.errorKey]: firstArg },\n            ),\n            ...args.slice(1),\n          ];\n        } else {\n          args = [\n            Object.assign({ [this.contextName]: this.context }, firstArg),\n            ...args.slice(1),\n          ];\n        }\n      } else {\n        args = [{ [this.contextName]: this.context }, ...args];\n      }\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore args are union of tuple types\n    this.logger[method](...args);\n  }\n}\n\nfunction isFirstArgObject(\n  args: Parameters<LoggerFn>,\n): args is [obj: object, msg?: string, ...args: any[]] {\n  return typeof args[0] === 'object';\n}\n"]}